<File version="3.1">
  <FileID>edebf892-0f19-436f-a637-22de85f04c07</FileID>
  <Preview>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
N+pcHIGIiDhteoadi+XsnV4JWbVOgY5ZXbnTte0mZtepxvTEG8x87Tzt4+rTiuuVXtwwTdbLPpXV
XmfwL19HM786z4h6hj/czgDQM6KmwFo1BkbV6EdERJxem4Nr1d73gdr7Nxrtz52tade032Tms2me
ofVq7dkwrTYH1/3L19HOp8GEjtruHQkAvWucVFbdFlJtR69JE4iIiLira2u2vSi7qjVoOvKjJgB8
tO0B4MYbb+y0tw3kltXrrTff0AsvvKBZs57Tc88hIiLiruyzz87S88+/oOKiQg2v/7sCQx/q3nvv
274AUFDRqPvuvVvPzZql+e+/r3fffRcRERF3YefOnaslSxZrcKBfQ+s+UmBwBwPA3XfdqbKyMudr
CDdu3IiIiIi7sB999JHWrl2rgf4+Daz9cMcDwD1336X8/Hx98MEHGhoaQkRExF3Y4eFh9fWZ4k8A
QEREdI8EAERERBdKAEBERHShBABEREQXSgBARER0oQQAREREF0oAQEREdKEEAERERBdKAEBERHSh
BABEREQXSgBARER0oQQAREREF0oAQEREdKEEAERERBdKAEBERHShBABEREQXSgBARER0oQQARERE
F0oAQEREdKEEAERERBdKAEBERHShBABEREQXSgBARER0oQQAREREF0oAQEREdKEEAERERBdKAEBE
RHShBABEREQXSgBARER0oQQAREREF0oAQEREdKEEAERERBdKAEBERHShBABEREQXSgBARER0oQQA
REREF0oAQEREdKEEAERERBdKAEBERHShBABEREQXSgBARER0oQQAREREF0oAQEREdKEEAERERBdK
AEBERHShBABEREQXSgBARER0oQQAREREF0oAQEREdKEEAERERBdKAEBERHShBABEREQXSgBARER0
oQQAREREF0oAQEREdKEEAERERBdKAEBERHShBABEREQXSgBARER0oQQAREREF0oAQEREdKEEAERE
RBdKAEBERHShBABEREQXSgBARER0oQQAREREF0oAQEREdKEEAERERBdKAEBERHShBABEREQXSgBA
RER0oQQAREREF0oAQEREdKEEAERERBdKAEBERHShBABEREQXSgBARER0oQQAREREF0oAQEREdKEE
AERERBdKAEBERHShBABEREQXSgBARER0oQQAREREF0oAQEREdKEEAERERBdKAEBERHShBABEREQX
SgBARER0oQQAREREF0oAQEREdKEEAERERBdKAEBERHShBABEREQXSgBARER0oQQAREREF0oAQERE
dKEEAERERBdKAEBERHShBABEREQXSgBARER0oQQAREREF0oAQEREdKEEAERERBdKAEBERHShBABE
REQXSgBARER0oQQAREREF0oAQEREdKEEAERERBdKAEBERHShBABEREQXSgBARER0oQQAREREF0oA
QEREdKEEAERERBdKAEBERHShBABEREQXSgBARER0oQQAREREF0oAQEREdKEEAERERBdKAEBERHSh
BABEREQXSgBARER0oQQAREREF0oAQEREdKEEAERERBdKAEBERHShBABEREQXSgBARER0oQQARERE
F0oAQEREdKEEAERERBdKAEBERHShBABEREQXSgBARER0oQQAREREF0oAQEREdKEEAERERBdKAEBE
RHShBABEREQXSgBARER0oQQAREREF0oAQEREdKEEAERERBdKAEBERHShBABEREQXSgBARER0oQQA
REREF0oAQEREdKEEAERERBdKAEBERHShBABEREQXSgBARER0oQQAREREF0oAQEREdKEEAERERBdK
AEBERHShBABEREQXSgBARER0oQQAREREF0oAQEREdKEEAERERBdKAEBERHShBABEREQXSgBARER0
oQQAREREF0oAQEREdKEEAERERBdKAEBERHShBABEREQXSgBARER0oQQAREREF0oAQEREdKEEAERE
RBdKAEBERHShBABEREQXSgBARER0oQQAREREF0oAQEREdKEEAERERBdKAEBERHShBABEREQXSgBA
RER0oQQAREREF0oAQEREdKEEAERERBdKAEBERHShBABEREQXSgBARER0oQQAREREF0oAQEREdKEE
AERERBdKAEBERHShBABEREQXSgBARER0oQQAREREF0oAQEREdKEEAERERBdKAEBERHShBABEREQX
SgBARER0oQQAREREF0oAQEREdKEEAERERBdKAEBERHShBABEREQXSgBARER0oQQAREREF0oAQERE
dKEEAERERBdKAEBERHShBABEREQXSgBARER0oQQAREREF0oAQEREdKEEAERERBdKAEBERHShBABE
REQXSgBARER0oQQAREREF0oAQEREdKEEAERERBdKAEBERHShBABEREQXSgBARER0oQQAREREF0oA
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</Preview>
  <Form>ERat1BJLhRAAACODCAAAAAAABADdl1tv2jAUx98n7TtYedgTotwvGiCN0E7VYKsa1j1OJjmAV8dGtlNgn37H
CS1sQONuZeomUESU/M/Nv3NsOp8m3yA0uvf6FSGd7IaY9QK6XrDWBuLiFyYiudTFC6ni7Foghx4V
yA0ozaTo1ool+ykQP+EmUdAVkBhFeYFcJRPOwg+wHstbEN1Js0nrYb1RbldrUGq1PSJojJ6naG/E
BISKTs2VXKLdOXA+9Eg4ZzxSKPV8KYySXHtp5Bj7lZILUGa9sfEuMTIIKYcBi0HYuPDVRoGUq52z
+1fzpCMZgde7QE+5Gp8zECZg31FQb2Pu1UYzX5QoLZXXG8CUYqly37d17ksVgQrMmtvQ2Aqi6iBX
OKIrFmNsfblCEeUaciUf8er1jq1ErjyYy+VlKIWru8BQhQ40M8yKfCwmZhkqAJGrHcPKeL2HMMk2
TjKkiQjnoPZtnN+hi42BoaTR8Vy/2seds1Rwr85vlH5ijBQnbxUs8ZTNMmePtcchmERatVBJLbFq
ARWaBKDYFJukstincd/EUIY0W69ayyJfLjmIRlTNGEpQsPk6iDIad5N1EGXdWC7Z0FycjOnkUkSA
LbLfuseoe0PjxdsAjGFiph1UnzX4Ml5g2SYcrIlrQJcK1V5vrJL9Rjlo4obphPJ0CPRpeOtLbsfI
QX3nLGP1xZGLRgXHznoZ7FaajdOy+3O6J6XXJZMdegebyP4PejG+icR97uT83mWGAuAYESbwjAAX
m3Unhm1KNB0954LiikTOq7Clv9xsWcBap6X/l2K549+wvekS3Bb/+jNQhMcRk+g+VSfHSKeeJvSJ
AOUdHY8h51MRUUXJkM3mpkDarqhtgbHzqOayQf4BLg9FcQYlPXNXXDzg+9gw7xVbHDubPgZXzXm2
XgON1sV/Zz/m6VH5d3bjAaNczq5Bo+eUsBC4M5CHZ2ClVKw8Fcxq7W/s47tlch9jNrSGEzsPpFWe
totn/3Re/B6+c3P/U/d+AE73IHCFEAAA</Form>
  <Code><![CDATA[
$formMinecraftPowershellL_Load={
	#TODO: Initialize Form Controls here
	
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]
		$ListView,
		[Parameter(Mandatory = $true)]
		[int]
		$ColumnIndex,
		[System.Windows.Forms.SortOrder]
		$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($null -eq $lvGroup)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}


function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}

#endregion
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>